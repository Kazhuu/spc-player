{"version":3,"sources":["components/FileHandler.tsx","components/SpcList.tsx","SpcReader.ts","Serial.ts","components/UsbConnect.tsx","SpcClient.ts","App.tsx","index.js"],"names":["FileHandler","fileCallback","fileInput","useRef","Button","variant","color","component","disableElevation","type","onChange","event","preventDefault","current","files","i","length","file","item","push","ref","hidden","multiple","SpcList","spcReaderList","playingSongName","showProgress","progress","playCallback","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","Object","keys","map","name","colSpan","LinearProgress","value","hasID666Metadata","hover","selected","onClick","metadata","game","artist","comments","Emulator","Serial","device","interfaceNumber","endpointIn","endpointOut","this","open","configuration","selectConfiguration","interfaces","forEach","element","alternates","elementalt","interfaceClass","endpoints","elementendpoint","direction","endpointNumber","claimInterface","selectAlternateInterface","controlTransferOut","requestType","recipient","request","index","data","transferOut","size","transferIn","reset","close","UsbConnect","props","useState","deviceFound","setDeviceFound","statusMessage","setStatusMessage","a","filters","vendorId","navigator","usb","requestDevice","serial","connect","connectCallback","toString","useEffect","getDevices","devices","getDevice","className","SpcReader","filename","spcFileBuffer","programCounter","x","y","programStatusWord","stackPointer","dspRegisters","ram","firstPageRam","secondPageRam","restOfTheRam","buffer","Uint8Array","parse","title","verify","Error","parseSPCInfo","parseID666","slice","bufferToString","dumpedBy","dumpedOn","Date","Number","fadeOutLength","defaultChannelDisabled","emulator","start","TextDecoder","decode","replace","RAM_PACKET_SIZE","SpcClient","encoder","decoder","TextEncoder","Promise","reject","write","encode","numberToByte","read","result","updateProgress","packetCount","packetIndex","byteIndexEnd","byteIndexStart","readResult","status","bootCodeSize","byteToNumber","bootcode","number","arr","ArrayBuffer","DataView","setUint8","byte","getUint8","App","setSpcReaderList","spcClient","setSpcClient","notificationText","setNotificationText","setPlayingSongName","setShowProgress","setProgress","nextSong","setNextSong","newSpcReaderList","all","arrayBuffer","spcReader","hasOwnProperty","state","newSerial","findNextSong","previousSong","previousSongName","songs","entries","findIndex","play","writeCpuRegisters","writeDspRegisters","writeFirstPageRam","writeSecondPageRam","writeRestOfTheRam","setTimeout","songLengthInMs","message","Container","ButtonGroup","aria-label","then","catch","error","readPorts","portValues","console","log","readBootCode","bytes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61311e6a.chunk.js","sourcesContent":["import { useRef, SyntheticEvent } from \"react\";\nimport Button from \"@material-ui/core/Button\";\n\nexport default function FileHandler({\n  fileCallback,\n}: {\n  fileCallback: { (arg0: File[]): void };\n}) {\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const handleFileInput = (event: SyntheticEvent) => {\n    event.preventDefault();\n    if (\n      fileInput !== null &&\n      fileInput.current !== null &&\n      fileInput.current.files !== null\n    ) {\n      let files = [];\n      for (let i = 0; i < fileInput.current.files.length; i++) {\n        let file = fileInput.current.files.item(i);\n        if (file) {\n          files.push(file);\n        }\n      }\n      fileCallback(files);\n    }\n  };\n\n  return (\n    <Button\n      variant=\"contained\"\n      color=\"primary\"\n      component=\"label\"\n      disableElevation\n    >\n      Choose Files\n      <input\n        type=\"file\"\n        onChange={handleFileInput}\n        ref={fileInput}\n        hidden\n        multiple\n      />\n    </Button>\n  );\n}\n","import Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nimport SpcReader from \"SpcReader\";\n\nexport default function SpcList({\n  spcReaderList,\n  playingSongName,\n  showProgress,\n  progress,\n  playCallback,\n}: {\n  spcReaderList: { [key: string]: SpcReader };\n  playingSongName: string;\n  showProgress: boolean;\n  progress: number;\n  playCallback: {\n    (arg0: SpcReader): Promise<void>;\n  };\n}) {\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Game</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell>Artist</TableCell>\n            <TableCell>Comments</TableCell>\n            <TableCell>Length</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {Object.keys(spcReaderList).map((name) =>\n            playingSongName === name && showProgress ? (\n              <TableRow key={name}>\n                <TableCell colSpan={5}>\n                  <LinearProgress variant=\"determinate\" value={progress} />\n                </TableCell>\n              </TableRow>\n            ) : spcReaderList[name].hasID666Metadata ? (\n              <TableRow\n                hover\n                key={name}\n                selected={playingSongName === name}\n                onClick={() => playCallback(spcReaderList[name])}\n              >\n                <TableCell>{spcReaderList[name].metadata!.game}</TableCell>\n                <TableCell>{name}</TableCell>\n                <TableCell>{spcReaderList[name].metadata!.artist}</TableCell>\n                <TableCell>{spcReaderList[name].metadata!.comments}</TableCell>\n                <TableCell>{spcReaderList[name].metadata!.length}</TableCell>\n              </TableRow>\n            ) : (\n              <TableRow\n                hover\n                key={name}\n                selected={playingSongName === name}\n                onClick={() => playCallback(spcReaderList[name])}\n              >\n                <TableCell></TableCell>\n                <TableCell>{name}</TableCell>\n                <TableCell></TableCell>\n                <TableCell></TableCell>\n                <TableCell></TableCell>\n              </TableRow>\n            )\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","export enum Emulator {\n  Unknown = 0,\n  ZSNES,\n  Snes9x,\n}\n\nexport interface IId666 {\n  // Song title\n  title: string;\n  // Game title\n  game: string;\n  // Name of SPC dumper\n  dumpedBy: string;\n  // SPC comments\n  comments: string;\n  // Date SPC was dumped\n  dumpedOn: Date;\n  // Length of song in seconds before fadeout\n  length: number;\n  // Length of fadeout in milliseconds\n  fadeOutLength: number;\n  // Song artist\n  artist: string;\n  // \"Default channel disables\" (?)\n  defaultChannelDisabled: boolean;\n  // Emulator used to dump SPC\n  emulator: Emulator;\n}\n\nconst SPC_HEADER = \"SNES-SPC700 Sound File Data v0.30\";\n\nexport default class SpcReader {\n  public filename: string;\n  public programCounter: Uint8Array;\n  public a: number;\n  public x: number;\n  public y: number;\n  public programStatusWord: number;\n  public stackPointer: number;\n  public hasID666Metadata: boolean;\n  public metadata?: IId666;\n  public dspRegisters: Uint8Array;\n  public ram: Uint8Array;\n  public firstPageRam: Uint8Array;\n  public secondPageRam: Uint8Array;\n  public restOfTheRam: Uint8Array;\n\n  private buffer: Uint8Array;\n\n  constructor(filename: string, spcFileBuffer: ArrayBuffer) {\n    this.filename = filename;\n    this.buffer = new Uint8Array(spcFileBuffer);\n    this.parse();\n  }\n\n  name(): string {\n    if (this.hasID666Metadata) {\n      return this.metadata!.title;\n    } else {\n      return this.filename;\n    }\n  }\n\n  title(): string {\n    if (this.hasID666Metadata) {\n      return `${this.metadata!.game} - ${this.metadata!.title}`;\n    } else {\n      return `${this.name()}`;\n    }\n  }\n\n  songLengthInMs(): number {\n    if (this.hasID666Metadata) {\n      return this.metadata!.length * 1000;\n    } else {\n      return 60 * 1000;\n    }\n  }\n\n  private parse(): void {\n    if (!this.verify()) {\n      throw new Error(\"Not a valid SPC file\");\n    }\n\n    this.parseSPCInfo();\n    if (this.hasID666Metadata) {\n      this.parseID666();\n    }\n    this.dspRegisters = this.buffer.slice(0x10100, 0x10180);\n    this.ram = this.buffer.slice(0x100, 0x10100); // 65 536 bytes\n    this.firstPageRam = this.ram.slice(0x0, 0x100); // 256 bytes\n    this.secondPageRam = this.ram.slice(0x0100, 0x0200); // 256 bytes\n    this.restOfTheRam = this.ram.slice(0x0200, 0xffc0); // 64 960 bytes\n  }\n\n  private verify(): boolean {\n    return (\n      this.bufferToString(0, 33) === SPC_HEADER &&\n      this.buffer[0x21] === 26 &&\n      this.buffer[0x22] === 26\n    );\n  }\n\n  private parseSPCInfo(): void {\n    this.hasID666Metadata = this.buffer[0x23] === 0x1a;\n    this.a = this.buffer[0x27];\n    this.x = this.buffer[0x28];\n    this.y = this.buffer[0x29];\n    this.programStatusWord = this.buffer[0x2a];\n    this.stackPointer = this.buffer[0x2b];\n    this.programCounter = this.buffer.slice(0x25, 0x25 + 2);\n  }\n\n  private parseID666(): void {\n    this.metadata = {\n      title: this.bufferToString(0x2e, 32),\n      game: this.bufferToString(0x4e, 32),\n      dumpedBy: this.bufferToString(0x6e, 16),\n      comments: this.bufferToString(0x7e, 32),\n      dumpedOn: new Date(this.bufferToString(0x9e, 11)),\n      length: Number(this.bufferToString(0xa9, 3)),\n      fadeOutLength: Number(this.bufferToString(0xac, 4)),\n      artist: this.bufferToString(0xb1, 32),\n      defaultChannelDisabled: this.buffer[0xd1] === 1,\n      emulator: Number(this.bufferToString(0xd2, 1)),\n    };\n  }\n\n  private bufferToString(start: number, length: number): string {\n    return new TextDecoder(\"utf-8\")\n      .decode(this.buffer.slice(start, start + length))\n      .replace(/\\0/g, \"\");\n  }\n}\n","export default class Serial {\n  private device: USBDevice;\n  private interfaceNumber: number;\n  private endpointIn: number;\n  private endpointOut: number;\n\n  constructor(device: USBDevice) {\n    this.device = device;\n  }\n\n  public async connect() {\n    await this.device.open();\n    if (this.device.configuration === null) {\n      await this.device.selectConfiguration(1);\n    }\n    var configurationInterfaces = this.device.configuration!.interfaces;\n    configurationInterfaces.forEach((element) => {\n      element.alternates.forEach((elementalt) => {\n        if (elementalt.interfaceClass === 0xff) {\n          this.interfaceNumber = element.interfaceNumber;\n          elementalt.endpoints.forEach((elementendpoint) => {\n            if (elementendpoint.direction === \"out\") {\n              this.endpointOut = elementendpoint.endpointNumber;\n            }\n            if (elementendpoint.direction === \"in\") {\n              this.endpointIn = elementendpoint.endpointNumber;\n            }\n          });\n        }\n      });\n    });\n    await this.device.claimInterface(this.interfaceNumber);\n    await this.device.selectAlternateInterface(this.interfaceNumber, 0);\n    await this.device.controlTransferOut({\n      requestType: \"class\",\n      recipient: \"interface\",\n      request: 0x22,\n      value: 0x01,\n      index: this.interfaceNumber,\n    });\n  }\n\n  public write(data: BufferSource): Promise<USBOutTransferResult> {\n    return this.device.transferOut(this.endpointOut, data);\n  }\n\n  public read(size: number): Promise<USBInTransferResult> {\n    return this.device.transferIn(this.endpointIn, size);\n  }\n\n  public async reset() {\n    return await this.device.reset();\n  }\n\n  public async disconnect(): Promise<void> {\n    await this.device.controlTransferOut({\n      requestType: \"class\",\n      recipient: \"interface\",\n      request: 0x22,\n      value: 0x00,\n      index: this.interfaceNumber,\n    });\n    return await this.device.close();\n  }\n}\n","import { useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\n\nimport Serial from \"Serial\";\nimport \"App.css\";\n\nexport default function UsbConnect(props: any) {\n  const [deviceFound, setDeviceFound] = useState(false);\n  const [statusMessage, setStatusMessage] = useState(\"Device disconnected\");\n\n  useEffect(() => {\n    async function getDevice() {\n      let devices = await navigator.usb.getDevices();\n      if (devices.length > 0) {\n        let serial = new Serial(devices[0]);\n        try {\n          await serial.connect();\n          await serial.reset();\n          setStatusMessage(\"Device connected\");\n          setDeviceFound(true);\n          props.connectCallback(serial);\n        } catch (error) {\n          setStatusMessage(error.toString());\n        }\n      } else {\n        setDeviceFound(false);\n      }\n    }\n    getDevice();\n  }, []);\n\n  async function connect() {\n    if (!deviceFound) {\n      const filters = [{ vendorId: 0x2341 }]; // Arduino vendor id\n      let device = await navigator.usb.requestDevice({ filters: filters });\n      setDeviceFound(true);\n      let serial = new Serial(device);\n      try {\n        await serial.connect();\n        setStatusMessage(\"Device connected\");\n        setDeviceFound(true);\n        props.connectCallback(serial);\n      } catch (error) {\n        setStatusMessage(error.toString());\n      }\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        onClick={connect}\n        variant=\"contained\"\n        color=\"primary\"\n        disableElevation\n      >\n        Connect\n      </Button>\n      <label className=\"App-label\">Status: {statusMessage}</label>\n    </div>\n  );\n}\n","import Serial from \"Serial\";\n\nconst RAM_PACKET_SIZE = 1015;\n\nexport default class SpcClient {\n  private serial: Serial;\n  private encoder: TextEncoder;\n  private decoder: TextDecoder;\n\n  public constructor(serial: Serial) {\n    this.serial = serial;\n    this.encoder = new TextEncoder();\n    this.decoder = new TextDecoder();\n  }\n\n  public async writeCpuRegisters(\n    programCounter: Uint8Array,\n    a: number,\n    x: number,\n    y: number,\n    stackPointer: number,\n    programStatusWord: number\n  ) {\n    if (programCounter.length !== 2) {\n      return Promise.reject(\"Parameter programCounter length must be 2\");\n    }\n    await this.serial.write(this.encode(\"C\"));\n    await this.serial.write(programCounter);\n    await this.serial.write(this.numberToByte(a));\n    await this.serial.write(this.numberToByte(x));\n    await this.serial.write(this.numberToByte(y));\n    await this.serial.write(this.numberToByte(stackPointer));\n    await this.serial.write(this.numberToByte(programStatusWord));\n    let result = await this.serial.read(1);\n    if (result.data && this.decode(result.data.buffer) !== \"1\") {\n      return Promise.reject(\"Writing CPU registers failed\");\n    }\n  }\n\n  public async writeDspRegisters(dspRegisters: Uint8Array) {\n    if (dspRegisters.length !== 128) {\n      return Promise.reject(\"DSP requires 128 register values\");\n    }\n    await this.serial.write(this.encode(\"D\"));\n    await this.serial.write(dspRegisters);\n    let result = await this.serial.read(1);\n    if (result.data && this.decode(result.data.buffer) !== \"1\") {\n      return Promise.reject(\"Writing DSP registers failed\");\n    }\n  }\n\n  public async writeFirstPageRam(firstPageRam: Uint8Array) {\n    if (firstPageRam.length !== 256) {\n      return Promise.reject(\"First page of the SPC ram requires 256 bytes\");\n    }\n    await this.serial.write(this.encode(\"0\"));\n    await this.serial.write(firstPageRam);\n    let result = await this.serial.read(1);\n    if (result.data && this.decode(result.data.buffer) !== \"1\") {\n      return Promise.reject(\"Writing first page ram failed\");\n    }\n  }\n\n  public async writeSecondPageRam(secondPageRam: Uint8Array) {\n    if (secondPageRam.length !== 256) {\n      return Promise.reject(\"Second page of the SPC ram requires 256 bytes\");\n    }\n    await this.serial.write(this.encode(\"1\"));\n    await this.serial.write(secondPageRam);\n    let result = await this.serial.read(1);\n    if (result.data && this.decode(result.data.buffer) !== \"1\") {\n      return Promise.reject(\"Writing second page ram failed\");\n    }\n  }\n\n  public async writeRestOfTheRam(\n    restOfTheRam: Uint8Array,\n    updateProgress: { (progress: number): void }\n  ) {\n    if (restOfTheRam.length !== 64960) {\n      return Promise.reject(\"Rest of the SPC ram requires 64960 bytes\");\n    }\n    let packetCount = restOfTheRam.length / RAM_PACKET_SIZE;\n    await this.serial.write(this.encode(\"2\"));\n    for (let packetIndex = 0; packetIndex < packetCount; ++packetIndex) {\n      let byteIndexStart = packetIndex * RAM_PACKET_SIZE;\n      let byteIndexEnd = byteIndexStart + RAM_PACKET_SIZE;\n      await this.serial.write(restOfTheRam.slice(byteIndexStart, byteIndexEnd));\n      let readResult = await this.serial.read(1);\n      let progress = ((packetIndex + 1) / packetCount) * 100;\n      updateProgress(progress);\n      if (readResult.data && this.decode(readResult.data.buffer) !== \"1\") {\n        return Promise.reject(\n          \"SPC Ram packet \" + packetIndex + \" transfer failed\"\n        );\n      }\n    }\n  }\n\n  public async readBootCode(): Promise<Uint8Array> {\n    await this.serial.write(this.encode(\"B\"));\n    let result = await this.serial.read(1);\n    if (result.status !== \"ok\") {\n      return Promise.reject(\"Reading bootcode size timed out\");\n    }\n    let bootCodeSize = this.byteToNumber(result.data!.buffer);\n    let bootcode = await this.serial.read(bootCodeSize);\n    if (result.status !== \"ok\") {\n      return Promise.reject(\"Reading bootcode timed out\");\n    }\n    return new Uint8Array(bootcode.data!.buffer);\n  }\n\n  public async readPorts(): Promise<Uint8Array> {\n    await this.serial.write(this.encode(\"Q\"));\n    let result = await this.serial.read(4);\n    if (result.status !== \"ok\") {\n      return Promise.reject(\"Reading SPC ports timed out\");\n    }\n    return new Uint8Array(result.data!.buffer);\n  }\n\n  public async start() {\n    await this.serial.write(this.encode(\"S\"));\n    let result = await this.serial.read(1);\n    if (result.data && this.decode(result.data.buffer) !== \"1\") {\n      return Promise.reject(\"Starting SPC execution failed\");\n    }\n  }\n\n  public async reset() {\n    await this.serial.write(this.encode(\"R\"));\n    let result = await this.serial.read(1);\n    if (result.data && this.decode(result.data.buffer) !== \"1\") {\n      await this.serial.reset();\n      return Promise.reject(\"SPC reset timed out\");\n    }\n    await this.serial.reset();\n  }\n\n  private encode(data: string) {\n    return this.encoder.encode(data);\n  }\n\n  private decode(data: ArrayBuffer) {\n    return this.decoder.decode(data);\n  }\n\n  private numberToByte(number: number) {\n    let arr = new ArrayBuffer(1);\n    let view = new DataView(arr);\n    view.setUint8(0, number);\n    return arr;\n  }\n\n  private byteToNumber(byte: ArrayBuffer): number {\n    let view = new DataView(byte);\n    return view.getUint8(0);\n  }\n}\n","import \"index.css\";\nimport \"App.css\";\n\nimport { useState, useEffect } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\n\nimport FileHandler from \"components/FileHandler\";\nimport SpcList from \"components/SpcList\";\nimport UsbConnect from \"components/UsbConnect\";\n\nimport SpcReader from \"SpcReader\";\nimport Serial from \"Serial\";\nimport SpcClient from \"SpcClient\";\n\nexport default function App() {\n  const [spcReaderList, setSpcReaderList] = useState({});\n  const [spcClient, setSpcClient] = useState<SpcClient | null>(null);\n  const [notificationText, setNotificationText] = useState(\"\");\n  const [playingSongName, setPlayingSongName] = useState<string>(\"\");\n  const [showProgress, setShowProgress] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [nextSong, setNextSong] = useState<SpcReader | null>(null);\n\n  useEffect(() => {\n    if (nextSong) {\n      play(nextSong);\n      setNextSong(null);\n    }\n  }, [nextSong]);\n\n  async function fileCallback(file: File[]) {\n    let newSpcReaderList: { [key: string]: SpcReader } = {};\n    await Promise.all(\n      file.map(async (file) => {\n        let buffer = await file.arrayBuffer();\n        const spcReader = new SpcReader(file.name, buffer);\n        if (!spcReaderList.hasOwnProperty(spcReader.name())) {\n          newSpcReaderList[spcReader.name()] = spcReader;\n        }\n      })\n    );\n    setSpcReaderList((state) => ({ ...newSpcReaderList, ...state }));\n  }\n\n  async function serialConnect(newSerial: Serial) {\n    setSpcClient(new SpcClient(newSerial));\n  }\n\n  function reset() {\n    if (spcClient) {\n      setNextSong(null);\n      spcClient\n        .reset()\n        .then(() => setNotificationText(\"SPC reset was successful\"))\n        .catch((error) => setNotificationText(error.message));\n    }\n  }\n\n  function findNextSong(previousSong: SpcReader) {\n    const previousSongName = previousSong.name();\n    const songs = Object.entries(spcReaderList);\n    let index = songs.findIndex(([name, _]) => name === previousSongName);\n    if (index === -1 || index + 1 >= songs.length) {\n      index = -1;\n    }\n    setNextSong(songs[index + 1][1] as SpcReader);\n  }\n\n  async function play(spcReader: SpcReader): Promise<void> {\n    if (spcClient) {\n      try {\n        await spcClient.reset();\n        setPlayingSongName(spcReader.name());\n        setShowProgress(true);\n        setProgress(0);\n        await spcClient.writeCpuRegisters(\n          spcReader.programCounter,\n          spcReader.a,\n          spcReader.x,\n          spcReader.y,\n          spcReader.stackPointer,\n          spcReader.programStatusWord\n        );\n        await spcClient.writeDspRegisters(spcReader.dspRegisters);\n        await spcClient.writeFirstPageRam(spcReader.firstPageRam);\n        await spcClient.writeSecondPageRam(spcReader.secondPageRam);\n        await spcClient.writeRestOfTheRam(spcReader.restOfTheRam, (progress) =>\n          setProgress(progress)\n        );\n        await spcClient.start();\n        setNotificationText(`Successfully playing: ${spcReader.title()}`);\n        setTimeout(() => findNextSong(spcReader), spcReader.songLengthInMs());\n      } catch (error) {\n        setNotificationText(error.message);\n      }\n      setShowProgress(false);\n    }\n  }\n\n  function readPorts() {\n    if (spcClient) {\n      spcClient\n        .readPorts()\n        .then((portValues) => {\n          setNotificationText(\n            \"Reading SPC ports was successful. Check console for the data.\"\n          );\n          console.log(portValues);\n        })\n        .catch((error) => {\n          setNotificationText(error.message);\n        });\n    }\n  }\n\n  function readBootcode() {\n    if (spcClient) {\n      spcClient\n        .readBootCode()\n        .then((result) => {\n          let bytes: any = [];\n          result.forEach((byte) => {\n            bytes.push(byte.toString(16));\n          });\n          console.log(bytes);\n          setNotificationText(\n            \"Reading bootcode from Arduino was successful. Check console for the data\"\n          );\n        })\n        .catch((error) => {\n          setNotificationText(error.message);\n        });\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n        {!spcClient ? (\n          <div className=\"App-connect\">\n            <UsbConnect connectCallback={serialConnect} />\n          </div>\n        ) : (\n          <div>\n            <div className=\"App-connect\">\n              <ButtonGroup\n                color=\"primary\"\n                aria-label=\"outlined primary button group\"\n              >\n                <Button onClick={reset} disableElevation>\n                  Reset APU\n                </Button>\n                <Button onClick={readPorts} disableElevation>\n                  Read Ports\n                </Button>\n                <Button onClick={readBootcode} disableElevation>\n                  Read Bootcode\n                </Button>\n              </ButtonGroup>\n              <label className=\"App-label\">{notificationText}</label>\n            </div>\n            <FileHandler fileCallback={fileCallback} />\n            <div>\n              <SpcList\n                spcReaderList={spcReaderList}\n                playCallback={play}\n                playingSongName={playingSongName}\n                showProgress={showProgress}\n                progress={progress}\n              />\n            </div>\n          </div>\n        )}\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}